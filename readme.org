#+TITLE: My personal dotfiles
#+PROPERTY: header-args :tangle-mode (identity #o444)
#+STARTUP: overview
#+AUTHOR: Susan
#+EMAIL: susan@susan.lol
#+DESCRIPTION: My personal dotfiles configured using org mode, nixos, home-manager and emacs
#+TODO: TODO(t) IN-PROGRESS(i) WAITING(w) | DONE(d)

* Table of contents :toc:
- [[#flakenix][flake.nix]]
- [[#emacs][Emacs]]
  - [[#making-sure-packages-are-got-from-nix][Making sure packages are got from Nix]]
  - [[#bind-key][Bind key]]
  - [[#consult][Consult]]
  - [[#clang-format][Clang-format]]
  - [[#corfu][Corfu]]
  - [[#dap-mode][DAP mode]]
  - [[#direnv][direnv]]
  - [[#flycheck][Flycheck]]
  - [[#fonts][Fonts]]
  - [[#gui][GUI]]
  - [[#lsp-mode][LSP mode]]
  - [[#marginalia][Marginalia]]
  - [[#nix-mode][Nix Mode]]
  - [[#orderless][Orderless]]
  - [[#org-mode][Org Mode]]
  - [[#projectile][Projectile]]
  - [[#vertico][Vertico]]
  - [[#which-key][Which-key]]
- [[#hosts][Hosts]]
  - [[#defaultnix][default.nix]]
  - [[#configurationnix][configuration.nix]]
  - [[#homenix][home.nix]]
  - [[#framework-laptop][Framework Laptop]]
- [[#modules][Modules]]
  - [[#desktop][Desktop]]
  - [[#programs][Programs]]
  - [[#services][Services]]
- [[#github-actions][Github Actions]]
  - [[#automate-daily-version-bump][automate daily version bump]]
  - [[#automated-nix-flake-check-on-push][automated nix flake check on push]]

* flake.nix
Generate the flake.nix directly from org
#+begin_src nix :tangle ./flake.nix
{
  description = "My personal nixos configuration";
  
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
  
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  
    emacs-overlay = {
      url = "github:nix-community/emacs-overlay";
    };
  };
  
  outputs = inputs @ {self, nixpkgs, home-manager, emacs-overlay, ...} :
  {
    nixosConfigurations = (
      import ./hosts {
        inherit (nixpkgs) lib;
        inherit inputs nixpkgs home-manager emacs-overlay;
      }
    );
  };
}
#+end_src

* Emacs
:PROPERTIES:
:header-args:emacs-lisp: :tangle ./modules/programs/emacs/config.el
:END:

The actual emacs config that is going to be imported by home-manager

** Making sure packages are got from Nix
#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
#+END_SRC
** Bind key
#+begin_src emacs-lisp
(require 'bind-key)
#+end_src

** Consult
[[https://github.com/minad/consult][Consult]] provides search and navigation commands based on the Emacs completion function completing-read. 
#+begin_src emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
            ("C-c M-x" . consult-mode-command)
            ("C-c h" . consult-history)
            ("C-c k" . consult-kmacro)
            ("C-c m" . consult-man)
            ("C-c i" . consult-info)
            ([remap Info-search] . consult-info)
            ;; C-x bindings in `ctl-x-map'
            ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
            ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
            ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
            ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
            ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
            ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
            ;; Custom M-# bindings for fast register access
            ("M-#" . consult-register-load)
            ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
            ("C-M-#" . consult-register)
            ;; Other custom bindings
            ("M-y" . consult-yank-pop)                ;; orig. yank-pop
            ;; M-g bindings in `goto-map'
            ("M-g e" . consult-compile-error)
            ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
            ("M-g g" . consult-goto-line)             ;; orig. goto-line
            ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
            ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
            ("M-g m" . consult-mark)
            ("M-g k" . consult-global-mark)
            ("M-g i" . consult-imenu)
            ("M-g I" . consult-imenu-multi)
            ;; M-s bindings in `search-map'
            ("M-s d" . consult-find)
            ("M-s D" . consult-locate)
            ("M-s g" . consult-grep)
            ("M-s G" . consult-git-grep)
            ("M-s r" . consult-ripgrep)
            ("M-s l" . consult-line)
            ("M-s L" . consult-line-multi)
            ("M-s k" . consult-keep-lines)
            ("M-s u" . consult-focus-lines)
            ;; Isearch integration
            ("M-s e" . consult-isearch-history)
            :map isearch-mode-map
            ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
            ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
            ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
            ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
            ;; Minibuffer history
           :map minibuffer-local-map
            ("M-s" . consult-history)                 ;; orig. next-matching-history-element
            ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both  and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
  )
#+end_src

** Clang-format
#+begin_src emacs-lisp
(use-package clang-format
  :ensure t
  :hook (c++-mode . (lambda () (add-hook 'before-save-hook #'clang-format-buffer nil t))))
#+end_src

** IN-PROGRESS Corfu
[[https://github.com/minad/corfu][Corfu]] 
#+begin_src emacs-lisp
(use-package corfu

  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  (corfu-quit-no-match t)
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `global-corfu-modes'.
  :init
  (global-corfu-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-ident 'complete))
#+end_src

** IN-PROGRESS DAP mode
#+begin_src emacs-lisp
(use-package dap-mode
  :after lsp-mode
  :config
  (require 'dap-lldb)
  (dap-mode t)
  (dap-ui-mode t))
#+end_src

** direnv
#+begin_src emacs-lisp
(use-package direnv
 :config
 (direnv-mode))
#+end_src

** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+end_src

** Fonts
Defining the various fonts that Emacs will use.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "FiraCode Nerd Font Mono"
    :height 130
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Fira Sans"
    :height 130
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "FiraCode Nerd Font Mono"
    :height 130
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font Mono-13"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)

#+end_src

*** Ligatures
#+begin_src emacs-lisp
(use-package ligature
  :config
  ;; Enable the www ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))

  ;; Enable ligatures in programming modes                                                           
  (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
				       ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
				       "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
				       "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
				       "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
				       "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
				       "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
				       "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
				       "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
				       "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))

  (global-ligature-mode 't))
#+end_src

** GUI
*** Cursor
#+begin_src emacs-lisp
(setq-default cursor-type 'bar)
#+end_src

*** Pointer
I don't use the pointer so lets hide it
#+begin_src emacs-lisp
(setq make-pointer-invisible t)
#+end_src

*** Theme
#+begin_src emacs-lisp
(use-package gruvbox-theme
  :config
  ;; Enable the theme
  (load-theme 'gruvbox-dark-medium t))
#+end_src

*** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

*** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

** IN-PROGRESS LSP mode
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :custom
  (lsp-completion-provider :none)  ;; disable built-in completion so we can use Corfu
  :init
  (defun my/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless)))  ;; configure flex completion
  :hook ((lsp-mode . lsp-enable-which-key-integration)
         (lsp-completion-mode . my/lsp-mode-setup-completion)
         (c++-mode . lsp-deferred)))  ;; enable lsp-mode for c++

(use-package lsp-ui
  :ensure t
  :hook (lsp-mode . lsp-ui-mode))

#+end_src

** Marginalia
[[https://github.com/minad/marginalia][Marginalia]] provides rich annotations
#+begin_src emacs-lisp
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
        ("M-A" . marginalia-cycle))

  :init
  (marginalia-mode))
#+end_src

** Nix Mode
#+begin_src emacs-lisp
(use-package nix-mode
:mode ("\\.nix\\'"))
#+end_src

** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space) 
  (setq completion-styles '(orderless basic)
      completion-category-defaults nil
      completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** IN-PROGRESS Org Mode
*** Disable org electric ident
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

*** Asociate all org files with org mode
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
#+end_src

*** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

*** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

*** Org-appear
#+begin_src emacs-lisp
(use-package org-appear
  :commands (org-appear-mode)
  :hook (org-mode . org-appear-mode)  
  :init
  (setq org-hide-emphasis-markers t       ;; A default setting that needs to be t for org-appear
        org-appear-autoemphasis t	        ;; Enable org-appear on emphasis (bold, italics, etc)
        org-appear-autolinks t  	        ;; Enable on links
        org-appear-autosubmarkers t))     ;; Enable on subscript and superscript
#+end_src

*** Org todo states
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "PLANNING(p)" "IN-PROGRESS(i)" "BLOCKED(b)"  "|" "DONE(d)" "WONT-DO(!)" )))
#+end_src

*** Make meta lines smaller
#+begin_src emacs-lisp
(custom-set-faces
 '(org-todo ((t (:inherit font-lock-keyword-face :weight bold :height 0.8))))
 '(org-done ((t (:inherit font-lock-keyword-face :weight bold :height 0.8)))))
#+end_src

*** Org Agenda
#+begin_src emacs-lisp
(setq org-agenda-files '("~/org"))
#+end_src

**** TODO Org super agenda
*** IN-PROGRESS Add org capture
#+begin_src emacs-lisp

#+end_src
** Projectile
#+begin_src emacs-lisp
 (use-package projectile
  :ensure t  ; Ensure the package is installed if not already
  :init
  (projectile-mode 1) ; Enable projectile globally
  :config
  ;; Other configurations
  (setq projectile-project-root-files-top-down-recurring
        (append '(".projectile")
                projectile-project-root-files-top-down-recurring))

  ;; If you use a global prefix for Projectile commands (optional)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

** Vertico
[[https://github.com/minad/vertico][Vertico]] provides a performant and minimalistic vertical completion UI based on the default completion system.
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :ensure nil
    :init
    (savehist-mode))

  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))  
#+end_src

** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " → " ))
#+end_src

* Hosts
General configurations that used on all hosts + folders for host specific
** default.nix
#+begin_src nix :tangle ./hosts/default.nix
{ lib, inputs, nixpkgs, home-manager, emacs-overlay, ... }:
let
  system = "x86_64_linux";

  pkgs = import nixpkgs {
    inherit system;
    config.allowUnfree = true;
  };

  lib = nixpkgs.lib;
in
{
  framework = lib.nixosSystem {
    inherit system;

    modules = [
      { nixpkgs = {
          overlays = [ emacs-overlay.overlay ];
          config.allowUnfree = true;
        };

        nix.settings = {
          substituters = [ "https://nix-community.cachix.org" ];
          trusted-public-keys = [     
            "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=" ];
        };
      }

      ./framework
      ./configuration.nix

      home-manager.nixosModules.home-manager {
        home-manager.useUserPackages = true;
        home-manager.useGlobalPkgs = true;

        home-manager.users.susan = {
          imports = [(import ./home.nix)] ++ [(import ./framework/home.nix)];
        };
      } 
    ];
  };
} 
#+end_src

** configuration.nix
#+begin_src nix :tangle ./hosts/configuration.nix
{ config, lib, pkgs, ... }:
{
  time.timeZone = "Europe/Bucharest";

  boot.kernelPackages = pkgs.linuxPackages_latest;

  security.polkit.enable = true;

  fonts.packages = with pkgs; [
    (nerdfonts.override { fonts = [ "FiraCode" ]; })
    font-awesome
    fira
  ];

  services = {
    udev.packages = [ pkgs.yubikey-personalization ];
    pcscd.enable = true;
    pipewire = { 
      enable = true;
      pulse.enable = true;
    }; 
  };

  users = {
   mutableUsers = false; 
   defaultUserShell = pkgs.fish;
   users.susan = {
     isNormalUser = true;
     extraGroups = [ "wheel" "video"];
     hashedPassword = "$6$vru/Kz/2RFnBeCXQ$FPDE/DET/P2pNfE2bpVsEdDCeMegmeMApE4l3m/2YR9t6qCSrdiTzqUr8aN1gnOTAcYXBQ30NUf3UtqxINmDL.";
   };
 };

  environment.systemPackages = with pkgs; [ ];

  programs = {
    dconf.enable = true;
    fish.enable = true;
  };

  nix = {
    settings = {
      experimental-features = [ "nix-command" "flakes" ];
      auto-optimise-store = true;
    };
    gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 15d";
    };
  };

  networking.networkmanager.enable = true;

  system = {
    #autoUpgrade = {
    #  enable = true;
    #  dates = "02:00";
    #  persistent = true;
    #  flake = "github:susanthenerd/dotfiles";
    #  allowReboot = true;
    #  rebootWindow = {
    #    lower = "02:00";
    #    upper = "04:00";
    #  };
    #}; 
    # This value determines the NixOS release from which the default
    # settings for stateful data, like file locations and database versions
    # on your system were taken. It's perfectly fine and recommended to leave
    # this value at the release version of the first install of this system.
    # Before changing this value read the documentation for this option
    # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
    stateVersion = "23.05"; # Did you read the comment?
  }; 
}
#+end_src

** home.nix
home-manager configs
#+begin_src nix :tangle ./hosts/home.nix
{ config, lib, pkgs, ... }:
{ 
  imports =
  [(import ../modules/programs/exa)]
  ++ [(import ../modules/programs/fish)]
  ++ [(import ../modules/programs/git)]
  ++ [(import ../modules/programs/starship)];

  home = {
    username = "susan";
    homeDirectory = "/home/susan";

    packages = with pkgs; [
      pinentry-curses
      neofetch
      htop
    ];
    # pointerCursor = {# This will set cursor system-wide so applications can not choose their own
    #  gtk.enable = true;
    #  #name = "Dracula-cursors";
    #  name = "Catppuccin-Mocha-Dark-Cursors";
    #  #package = pkgs.dracula-theme;
    #  package = pkgs.catppuccin-cursors.mochaDark;
    #  size = 16;
    # };
    stateVersion = "23.05";
  };

  programs = {
    home-manager.enable = true;
    direnv = {
      enable = true;
      enableBashIntegration = true;
      nix-direnv.enable = true;
    };
  };

  services = {
  };

  gtk = {
    enable = true;
  #  theme = {
  #    name = "Gruvbox-Dark";
  #    package = pkgs.gruvbox-dark-gtk;
  #  };
    font = {
      name = "Fira Sans";
    };
  };
}
#+END_src

** Framework Laptop
Specific configs for my Framework Laptop
Specs of the Framework
i7-1280P 6P 8E 20T 4.7Ghz
64GB DDR4 3200Mhz
Segate Firecuda 530 2TB Nvme GEN 4x4

*** default.nix
#+begin_src nix :tangle ./hosts/framework/default.nix
{ config, pkgs, lib, ... }:
{
  security.pam = {
    u2f = {
      control = "requisite";
      cue = true;
    };
    services = {
      login.u2fAuth = true;
      sudo.u2fAuth = true;
    };
  };
  imports = [(import ./hardware-configuration.nix)] ++ [(../../modules/services/syncthing)];
  
  programs = {
    light.enable = true;
  };

  networking.hostName = "framework";

  services = {
    # tlp.enable = true;                      # TLP and auto-cpufreq for power management    
    auto-cpufreq.enable = true;
    # blueman.enable = true;
  };
  xdg.portal = {
    enable = true;
    wlr.enable = true;
  };
}
#+end_src

*** hardware-configuration.nix
The only special thing here is that I have here configured the file systems
#+begin_src nix :tangle ./hosts/framework/hardware-configuration.nix
{ config, lib, pkgs, modulesPath, ... }:
{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  fileSystems = {
    "/" ={ 
      device = "/dev/disk/by-uuid/d71bf142-e8b1-4dbe-a5ba-ed99a4a3320b";
      fsType = "btrfs";
    };
    "/data" ={ 
      device = "/dev/disk/by-uuid/d4e49e77-74eb-4acb-b52c-144d6bc4fa06";
      fsType = "btrfs";
    };
    "/home" ={ 
      device = "/dev/disk/by-uuid/8b84cc95-9f12-4cd6-9504-81ac42471119";
      fsType = "btrfs";
    };
    "/boot" ={ 
      device = "/dev/disk/by-uuid/D13E-83BD";
      fsType = "vfat";
    };
  };

  boot = {
    initrd = {
      availableKernelModules = [ "xhci_pci" "thunderbolt" "nvme" "usb_storage" "usbhid" "sd_mod" ];
      kernelModules = [ "dm-snapshot" ];
      luks.devices."luks" = { 
        device = "/dev/disk/by-uuid/2de82026-9bbe-4ef6-bea7-7b163c0345e6";
        preLVM = true;
      };
    };
    kernelModules = [ "kvm-intel" ];
    extraModulePackages = [ ];
    loader = {
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
    };
  };

  swapDevices = [ { device = "/dev/disk/by-uuid/aa146de9-d8c4-4473-9b5b-a8ba28676184"; } ];

  networking.useDHCP = lib.mkDefault true;

  networking.firewall = {
    enable = true;
    # 1714 to 1764 are used by kdeconnect
    # 21027 and 22000 are used by syncthing
    allowedTCPPortRanges = [ { from = 1714; to = 1764; } ];
    allowedUDPPortRanges = [ { from = 1714; to = 1764; } ];
  };

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware = {
    opengl.enable = true; 
    pulseaudio.enable = false;
    cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  };
}
#+end_src

*** home.nix
Specific home-manager configs for my framework
#+begin_src nix :tangle ./hosts/framework/home.nix
{ config, lib, pkgs, ... }:
{
  imports = [(import ../../modules/desktop/sway)]
  ++ [(import ../../modules/programs/emacs)]
  ++ [(import ../../modules/programs/foot)]
  ++ [(import ../../modules/programs/mako)];
  programs = {
  };

  home.packages = with pkgs; [
    jetbrains.clion
    android-studio
    firefox
    signal-desktop
    yubioath-flutter
    grim
    slurp
    pavucontrol
    qbittorrent
    fuzzel
  ];
  xdg.enable = true;
}
#+end_src

* Modules
** Desktop
*** Sway
#+begin_src nix :tangle ./modules/desktop/sway/default.nix
{config, lib, pkgs, ... }:
{
  imports = [(../../programs/i3status-rust)];
  wayland.windowManager.sway = {
    enable = true;
    config = rec {
      modifier = "Mod4";
      terminal = "foot";
      startup = [
        # Launch Firefox on start
        {command = "firefox";}
        {command = "signal-desktop";}
      ];
      fonts = {                                                                            
        names = [ "FiraCode Nerd Font Mono" "FontAwesome"];
        style = "Regular";
        size = 11.0;
      };
      bars = [
        {
          mode = "hide";
          fonts = {
            names = [ "FiraCode Nerd Font Mono" "FontAwesome"];
            style = "Regular";
            size = 11.0;
          };
          position = "bottom";
          statusCommand = "i3status-rs ~/.config/i3status-rust/config-default.toml";
          # colors={
          #  separator = "#666666";
          #  background = "#222222";
          #  statusline = "#dddddd";
          #  focusedWorkspace = {
          #    background = "#0088CC";
          #    border = "#0088CC";
          #    text = "#ffffff";
          #  };
          #  activeWorkspace = {
          #    background = "#333333";
          #    border = "#333333";
          #    text = "#ffffff";
          #  };
          #  inactiveWorkspace = {
          #   background = "#333333";
          #   border = "#333333";
          #   text = "#888888";
          #  };
          #  urgentWorkspace = {
          #    background = "#2f343a";
          #    border = "#900000";
          #    text = "#ffffff";
          #  };
          #};
        }
      ];
      gaps = {
        outer = 0;
        inner = 0;
        # smartBorders = "on";
      };
      keybindings = {
        #Launch stuff
        "${modifier}+Return" = "exec ${terminal}";
        "${modifier}+Shift+b" = "exec firefox";
        "${modifier}+Shift+Return" = "exec fuzzel";

        # Windows
        "${modifier}+Shift+c" = "kill";

        # Layouts
        "${modifier}+b" = "splith";
        "${modifier}+v" = "splitv";

        # Switch the current container between different layout styles
        "${modifier}+s" = "layout stacking";
        "${modifier}+w" = "layout tabbed";
        "${modifier}+e" = "layout toggle split";

        "${modifier}+f" = "fullscreen";

        # Toggle the current focus between tiling and floating mode
        "${modifier}+Shift+space" = "floating toggle";

        # Swap focus between the tiling area and the floating area
        "${modifier}+space" = "focus mode_toggle";

        # Move focus to the parent container
        "${modifier}+a" = "focus parent";

        # Workspaces
        "${modifier}+1" = "workspace number 1";
        "${modifier}+2" = "workspace number 2";
        "${modifier}+3" = "workspace number 3";
        "${modifier}+4" = "workspace number 4";
        "${modifier}+5" = "workspace number 5";
        "${modifier}+6" = "workspace number 6";
        "${modifier}+7" = "workspace number 7";
        "${modifier}+8" = "workspace number 8";
        "${modifier}+9" = "workspace number 9";

        "${modifier}+Shift+1" = "move container to workspace number 1";
        "${modifier}+Shift+2" = "move container to workspace number 2";
        "${modifier}+Shift+3" = "move container to workspace number 3";
        "${modifier}+Shift+4" = "move container to workspace number 4";
        "${modifier}+Shift+5" = "move container to workspace number 5";
        "${modifier}+Shift+6" = "move container to workspace number 6";
        "${modifier}+Shift+7" = "move container to workspace number 7"; 
        "${modifier}+Shift+8" = "move container to workspace number 8";
        "${modifier}+Shift+9" = "move container to workspace number 9";

        # Screenshot
        "Print" = "exec grim ~/Pictures/screenshot-$(date +'%Y-%m-%d-%H-%M-%S' ).png";
        "${modifier}+Print" = "exec slurp | grim -g - ~/Pictures/screenshot-slurp-$(date +'%Y-%m-%d-%H-%M-%S' ).png";

        # Resize
        "${modifier}+r" = "mode resize";

        # Other keybindings
        "${modifier}+Shift+r" = "reload";
        "${modifier}+Shift+e" = "exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'";
      };
      modes = {
        resize = {
          "Down" = "resize grow height 10 px";
          "Escape" = "mode default";
          "Left" = "resize shrink width 10 px";
          "Return" = "mode default";
          "Right" = "resize grow width 10 px";
          "Up" = "resize shrink height 10 px";
          "h" = "resize shrink width 10 px";
          "j" = "resize grow height 10 px";
          "k" = "resize shrink height 10 px";
          "l" = "resize grow width 10 px";
        };
      };

      output = {
        eDP-1 = {
          scale = "1";
        };
        DP-1 = {
          scale = "1";
        };
      };
      window = {
        border = 0;
        titlebar = false;
      };
      workspaceAutoBackAndForth = true;
    };
  };
}
#+end_src

** Programs
*** Emacs
This is home-manager specific things
#+begin_src nix :tangle ./modules/programs/emacs/default.nix
{config, lib, pkgs, ... }:
let  
  myEmacs = pkgs.emacsWithPackagesFromUsePackage {                                      
    config = ./config.el;                                                               
    defaultInitFile = true;
    alwaysEnsure = true;
    package = pkgs.emacs29-pgtk;                                                          
  };  
in
{
  # programs.emacs = {
  #  enable = true;
  #  package = myEmacs;
  # };
  services.emacs = {
    enable = true;
    package = myEmacs;
    client.enable = true;
    defaultEditor = true;
  };
}
#+end_src

*** Exa
#+begin_src nix :tangle ./modules/programs/exa/default.nix
{config, lib, pkgs, ... }:
{
  programs.eza = {
    enable = true;
    git = true;
    icons = true;
    enableAliases = true;
  };
}
#+end_src

*** Fish
#+begin_src nix :tangle ./modules/programs/fish/default.nix
{config, lib, pkgs, ...}:
{
  imports = [(../fzf)];
  
  programs.fish = {
    enable = true;
    shellInit = "set -g fish_greeting";
  };
}
#+end_src

*** FZF
#+begin_src nix :tangle ./modules/programs/fzf/default.nix
{config, lib, pkgs, ...}:
{
  programs.fzf = {
    enable = true;
  };
}
#+end_src

*** Foot
#+begin_src nix :tangle ./modules/programs/foot/default.nix
  {config, lib, pkgs, ...}:
  {
    programs.foot = {
      enable = true;
      settings = {
        main = {
          font = "FiraCode Nerd Font Mono:size=14";
        };
        colors = {
          # Gruvbox Dark
          background = "282828";
          foreground = "ebdbb2";
          regular0 = "282828";
          regular1 = "cc241d";
          regular2 = "98971a";
          regular3 = "d79921";
          regular4 = "458588";
          regular5 = "b16286";
          regular6 = "689d6a";
          regular7 = "a89984";
          bright0 = "928374";
          bright1 = "fb4934";
          bright2 = "b8bb26";
          bright3 = "fabd2f";
          bright4 = "83a598";
          bright5 = "d3869b";
          bright6 = "8ec07c";
          bright7 = "ebdbb2";
        };
      };
    };
  }
#+end_src

*** Git
#+begin_src nix :tangle ./modules/programs/git/default.nix
{config, lib, pkgs, ... }:
{
  programs.git = {
    enable = true;
    userName = "Susan";
    userEmail = "susan@susan.lol";
  };
}
#+end_src

*** i3Status-rust
#+begin_src nix :tangle ./modules/programs/i3status-rust/default.nix
{config, lib, pkgs, ... }:
{
  programs.i3status-rust = {
    enable = true;
    bars = {
      default = {
        theme = "gruvbox-dark";
        icons = "awesome6";
        blocks = [
          {
            block = "memory";
            format = " $icon $mem_used_percents ";
            format_alt = " $icon SWAP $swap_used_percents ";
          }
          {
            block = "cpu";
            interval = 1;
          }
          {
            block = "load";
            format = " $icon $1m ";
            interval = 1;
          }
          {
            block = "battery";
            format = " $icon $percentage $time $power ";
            interval = 5;
          }
          {
            block = "net";
            format = " $icon ^icon_net_down $speed_down.eng(prefix:M) ^icon_net_up $speed_up.eng(prefix:M) ";
            format_alt = " $icon {$signal_strength $ssid $frequency|Wired connection} $ip ";
          }
          {
            block = "sound";
          }
          {
            block = "backlight";
          }
          {
            block = "time";
            format = " $timestamp.datetime(f:'%a %d/%m %R') ";
            interval = 60;
          }
        ];
      };
    };
  };
}
#+end_src

*** Mako
#+begin_src nix :tangle ./modules/programs/mako/default.nix
{config, pkgs, lib, ... }:
{
  services.mako = {
    enable = true;
    font = "FiraCode Nerd Font Mono Medium 13";
  };
}
#+end_src

*** Starship
#+begin_src nix :tangle ./modules/programs/starship/default.nix
{config, lib, pkgs, ... }:
{
  programs.starship = {
    enable = true;
    settings = {
      add_newline = false;
  
      character = {
        success_symbol = "[➜](bold green)";
        error_symbol = "[➜](bold red)";
      };
    };
  };
}
#+end_src

** Services
All services configured on my laptop and servers(that are not used for desktop pruposes)
*** Syncthing
File sync to my phone
#+begin_src nix :tangle ./modules/services/syncthing/default.nix
{config, pkgs, lib, ... }:
{ 
  services.syncthing = {
    enable = false;
    openDefaultPorts = true;
    user = "susan";
    dataDir = "/data/syncthing";
    configDir = "/data/.config/syncthing"; # I don't have any special configurations, but I'm letting this option here in case I forget about it 
  };
}
#+end_src

* Github Actions
** automate daily version bump
#+begin_src yaml :tangle ./.github/workflows/auto-version-bump.yaml
name: Daily Nix Flake Version Bump

on:
  schedule:
    - cron:  '0 0 * * *'

jobs:
  flake_update:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Nix
      uses: cachix/install-nix-action@v22

    - name: Update Flake
      run: |
        nix flake update
        if nix flake check; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add flake.lock
          git commit -m "automated daily version bump"
          git push
        fi
#+end_src

** automated nix flake check on push
#+begin_src yaml :tangle ./.github/workflows/auto-commit-check.yaml
name: Nix Flake Check On Commit
  
on:
  push:
    branches:
      - '**'
 
jobs:
  flake_check:
    runs-on: ubuntu-latest
  
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Nix
      uses: cachix/install-nix-action@v22

    - name: Nix Flake Check
      run: nix flake check
#+end_src

 
