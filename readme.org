#+TITLE: My personal dotfiles configured using a single org file, using NixOS, home-manager and emacs
#+PROPERTY: header-args :tangle-mode (identity #o444)
#+STARTUP: overview
#+AUTHOR: Susan
#+EMAIL: susan@susan.lol

* Description
My personal dotfiles configured completely in org mode.
* flake.nix
Generate the flake.nix directly from org
#+begin_src nix :tangle ./flake.nix
  {
    description = "My personal nixos configuration";
  
    inputs = {
      nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
  
      home-manager = {
        url = "github:nix-community/home-manager";
        inputs.nixpkgs.follows = "nixpkgs";
      };
    };
  
    outputs = inputs @ {self, home-manager, nixpkgs, ...} :
    {
      nixosConfigurations = (
        import ./hosts {
          inherit (nixpkgs) lib;
          inherit inputs nixpkgs home-manager;
        }
      );
    };
  }
#+end_src

* Hosts
General configurations that used on all hosts + folders for host specific
** default.nix
#+begin_src nix :tangle ./hosts/default.nix
  { lib, inputs, nixpkgs, home-manager, ... }:
  let
    system = "x86_64_linux";
  
    pkgs = import nixpkgs {
      inherit system;
      config.allowUnfree = true;
    };

    lib = nixpkgs.lib;
  in
  {
    framework = lib.nixosSystem {
      inherit system;
      modules = [
        ./framework
        ./configuration.nix
  
        home-manager.nixosModules.home-manager {
          home-manager.useUserPackages = true;
          home-manager.users.susan = {
            imports = [(import ./home.nix)] ++ [(import ./framework/home.nix)];
          };
        } 
      ];
    };
  } 
#+end_src
** configuration.nix
#+begin_src nix :tangle ./hosts/configuration.nix
  { config, lib, pkgs, ... }:
  {
    time.timeZone = "Europe/Bucharest";

    security.polkit.enable = true;
  
    services = {
      udev.packages = [ pkgs.yubikey-personalization ];
      pcscd.enable = true;
      pipewire = { 
        enable = true;
        pulse.enable = true;
      }; 
    };
  
    users = {
      mutableUsers = false; 
      defaultUserShell = pkgs.fish;
      users.susan = {
        isNormalUser = true;
        extraGroups = [ "wheel" "video"];
        hashedPassword = "$6$vru/Kz/2RFnBeCXQ$FPDE/DET/P2pNfE2bpVsEdDCeMegmeMApE4l3m/2YR9t6qCSrdiTzqUr8aN1gnOTAcYXBQ30NUf3UtqxINmDL.";
      };
    };
  
    environment.systemPackages = with pkgs; [
    ];
    programs = {
      fish.enable = true;
      gnupg.agent = {
        enable = true;
        enableSSHSupport = true;
        pinentryFlavor = "curses";
      };
    };
  
    nix.settings.experimental-features = [ "nix-command" "flakes" ];

    networking.networkmanager.enable = true;
  
    system = {
      autoUpgrade = {
        enable = true;
        dates = "02:00";
        persistent = true;
        flake = "github:susanthenerd/dotfiles";
        allowReboot = true;
        rebootWindow = {
          lower = "02:00";
          upper = "04:00";
        };
      }; 
      # This value determines the NixOS release from which the default
      # settings for stateful data, like file locations and database versions
      # on your system were taken. It's perfectly fine and recommended to leave
      # this value at the release version of the first install of this system.
      # Before changing this value read the documentation for this option
      # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
      stateVersion = "23.05"; # Did you read the comment?
    }; 
  }
#+end_src
** home.nix
home-manager configs
#+begin_src nix :tangle ./hosts/home.nix
  { config, lib, pkgs, ... }:
  { 
    imports = [(import ../modules/programs/starship)] ++
    [(import ../modules/desktop/sway)];
  
    home = {
      username = "susan";
      homeDirectory = "/home/susan";
      # enableNixpkgsReleaseCheck = false;
  
      packages = with pkgs; [
        prismlauncher
        firefox
        signal-desktop                                                                                                                                                                                                            
        # yubioath-flutter                                                                                                                                                                                                          
        git                                                                                                                                                                                                                       
        emacs29-pgtk                                                                                                                                                                                                              
        neovim                                                                                                                                                                                                                    
        pinentry-curses
        xdg-desktop-portal-gtk
        xdg-desktop-portal
      ];
      # pointerCursor = {                         # This will set cursor system-wide so applications can not choose their own
      #  gtk.enable = true;
      #  #name = "Dracula-cursors";
      #  name = "Catppuccin-Mocha-Dark-Cursors";
      #  #package = pkgs.dracula-theme;
      #  package = pkgs.catppuccin-cursors.mochaDark;
      #  size = 16;
      # };
      stateVersion = "23.05";
    };
  
    programs = {
      home-manager.enable = true;
      fish.enable = true;
    };
  
    # gtk = {                                     # Theming
    #  enable = true;
    #  theme = {
    #    #name = "Dracula";
    #    name = "Catppuccin-Mocha-Compact-Blue-Dark";
    #    #package = pkgs.dracula-theme;
    #    package = pkgs.catppuccin-gtk.override {
    #      accents = ["blue"];
    #      size = "compact";
    #      variant = "mocha";
    #    };
    #  };
    #  iconTheme = {
    #    name = "Papirus-Dark";
    #    package = pkgs.papirus-icon-theme;
    #  };
    #  font = {
    #    #name = "JetBrains Mono Medium";
    #    name = "FiraCode Nerd Font Mono Medium";
    #  };                                        # Cursor is declared under home.pointerCursor 
    # };
  }
#+END_src
** Framework Laptop
Specific configs for my Framework Laptop
Specs of the Framework
i7-1280P 6P 8E 20T 4.7Ghz
64GB DDR4 3200Mhz
Segate Firecuda 530 2TB Nvme GEN 4x4

*** default.nix
#+begin_src nix :tangle ./hosts/framework/default.nix
  { config, pkgs, lib, ... }:
  {
    imports = [(import ./hardware-configuration.nix)] ++ [(../../modules/services/syncthing)];
  
    programs = {
      light.enable = true;
    };

    networking.hostName = "framework";
  
    services = {
      #tlp.enable = true;                      # TLP and auto-cpufreq for power management
      auto-cpufreq.enable = true;
      blueman.enable = true;
    };
  }
#+end_src
*** hardware-configuration.nix
The only special thing here is that I have here configured the file systems
#+begin_src nix :tangle ./hosts/framework/hardware-configuration.nix
  { config, lib, pkgs, ... }:
  {
    fileSystems = {
      "/" ={ 
        device = "/dev/disk/by-uuid/b183e5d3-8679-4e45-88e6-bc1393323dfd";
        fsType = "btrfs";
      };
      "/boot" ={ 
        device = "/dev/disk/by-uuid/9829-2BBA";
        fsType = "vfat";
      };
    };
  
    boot = {
      initrd = {
        availableKernelModules = [ "xhci_pci" "thunderbolt" "nvme" "usb_storage" "usbhid" "sd_mod" ];
        kernelModules = [ "dm-snapshot" ];
        luks.devices."luks" = { 
          device = "/dev/disk/by-uuid/6c40ab71-86cd-40ff-82f6-0936ad7eb61d";
          preLVM = true;
        };
      };
      kernelModules = [ "kvm-intel" ];
      extraModulePackages = [ ];
      loader = {
        systemd-boot.enable = true;
        efi.canTouchEfiVariables = true;
      };
    };
  
    swapDevices =
      [ { device = "/dev/disk/by-uuid/9a231275-fc03-40c1-8c7b-a14f1592f185"; }
      ];

    networking.useDHCP = lib.mkDefault true;

    nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
    powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
    hardware = {
      opengl.enable = true;
      pulseaudio.enable = false;
      cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
    };
  }
#+end_src
*** home.nix
Specific home-manager configs for my framework
#+begin_src nix :tangle ./hosts/framework/home.nix
  { config, lib, pkgs, ... }:
  {
    imports = [(import ../../modules/programs/foot)];
  }
#+end_src
* Modules
** Services
All services configured on my laptop and servers
*** Syncthing
File sync to my phone
#+begin_src nix :tangle ./modules/services/syncthing/default.nix
  {config, pkgs, lib, ... }:
  { 
    services.syncthing = {
      enable = true;
      user = "susan";
      dataDir = "/home/susan/phone/";
      configDir = "/home/susan/.config/syncthing"; # I don't have any special configurations, but I'm letting this option here in case I forget about it 
    };
  }
#+end_src
** Programs
*** Starship
#+begin_src nix :tangle ./modules/programs/starship/default.nix
  {config, lib, pkgs, ... }:
  {
    programs.starship = {
      enable = true;
      # Configuration written to ~/.config/starship.toml
      settings = {
        # add_newline = false;
  
        # character = {
        #   success_symbol = "[➜](bold green)";
        #   error_symbol = "[➜](bold red)";
        # };
  
        # package.disabled = true;
      };
    };
  }
#+end_src
*** Foot
#+begin_src nix :tangle ./modules/programs/foot/default.nix
  {config, lib, pkgs, ...}:
  {
    programs.foot = {
      enable = true;
      settings = {
      };
    };
  }
#+end_src

** Desktop
*** Sway
#+begin_src nix :tangle ./modules/desktop/sway/default.nix
  {config, lib, pkgs, ... }:
  {
    wayland.windowManager.sway = {
      enable = true;
      config = rec {
        modifier = "Mod4";
        terminal = "foot"; 
        startup = [
          # Launch Firefox on start
          {command = "firefox";}
        ];
      };
    };
  }
#+end_src
* Github Actions
** automate daily version bump
#+begin_src yaml :tangle ./.github/workflows/auto-version-bump.yaml
  name: Daily Nix Flake Version Bump

  on:
    schedule:
      - cron:  '0 0 * * *'

  jobs:
    flake_update:
      runs-on: ubuntu-latest

      steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Nix
        uses: cachix/install-nix-action@v16

      - name: Update Flake
        run: |
          nix flake update
          if nix flake check; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add flake.lock
            git commit -m "automated daily version bump"
            git push
          fi
#+end_src
** automated nix flake check on push
#+begin_src yaml :tangle ./.github/workflows/auto-commit-check.yaml
  name: Nix Flake Check On Commit
  
  on:
    push:
      branches:
        - '**'
  
  jobs:
    flake_check:
      runs-on: ubuntu-latest
  
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Nix
        uses: cachix/install-nix-action@v22

      - name: Nix Flake Check
        run: nix flake check
#+end_src
