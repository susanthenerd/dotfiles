#+TITLE: My personal dotfiles
#+PROPERTY: header-args :tangle-mode (identity #o444)
#+STARTUP: overview
#+AUTHOR: Susan
#+EMAIL: susan@susan.lol
#+DESCRIPTION: My personal dotfiles configured using org mode, nixos, home-manager and emacs
* flake.nix
Generate the flake.nix directly from org
#+begin_src nix :tangle ./flake.nix
  {
    description = "My personal nixos configuration";
  
    inputs = {
      nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
  
      home-manager = {
        url = "github:nix-community/home-manager";
        inputs.nixpkgs.follows = "nixpkgs";
      };
  
      emacs-overlay = {
        url = "github:nix-community/emacs-overlay";
      };
    };
  
    outputs = inputs @ {self, nixpkgs, home-manager, emacs-overlay, ...} :
    {
      nixosConfigurations = (
        import ./hosts {
          inherit (nixpkgs) lib;
          inherit inputs nixpkgs home-manager emacs-overlay;
        }
      );
    };
  }
#+end_src
* Emacs
:PROPERTIES:
:header-args:emacs-lisp: :tangle ./modules/programs/emacs/config.el
:END:

The actual emacs config that is going to be imported by home-manager. Mostly done following DTs guide on Configuring Emacs

** Making sure packages are got from Nix
#+BEGIN_SRC
(setq package-enable-at-startup nil)
#+END_SRC

** Loading evil mode
[[https://github.com/emacs-evil/evil][Evil]] is an extensible vi/vim layer for Emacs.  Because...let's face it.  The Vim keybindings are just plain better.

#+begin_src emacs-lisp
  (use-package evil
      :init      ;; tweak evil's configuration before loading it
      (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
	    evil-want-keybinding nil
	    evil-vsplit-window-right t
	    evil-split-window-below t
	    evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
      (evil-mode))
    (use-package evil-collection
      :after evil
      :config
      (setq evil-collection-mode-list '(dashboard dired ibuffer))
      (evil-collection-init))
    (use-package evil-tutor)
#+end_src

** General Keybindings
#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)

    ;; set up 'SPC' as the global leader key
    ;; (general-create-definer dt/leader-keys
    ;;  :states '(normal insert visual emacs)
    ;;  :keymaps 'override
    ;;  :prefix "SPC" ;; set leader
    ;;  :global-prefix "M-SPC") ;; access leader in insert mode
  
    ;; (dt/leader-keys
    ;;  "b" '(:ignore t :wk "buffer")
    ;;  "bb" '(switch-to-buffer :wk "Switch buffer")
    ;;  "bk" '(kill-this-buffer :wk "Kill this buffer")
    ;;  "bn" '(next-buffer :wk "Next buffer")
    ;;  "bp" '(previous-buffer :wk "Previous buffer")
    ;;  "br" '(revert-buffer :wk "Reload buffer"))
  )
#+end_src

** Fonts
Defining the various fonts that Emacs will use.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "FiraCode Nerd Font Mono"
    :height 130
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Fira Sans"
    :height 130
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "FiraCode Nerd Font Mono"
    :height 130
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font Mono-13"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)

#+end_src

** GUI
*** Theme
#+begin_src emacs-lisp
  (use-package gruvbox-theme
  :ensure t
  :config
  ;; Enable the theme
  (load-theme 'gruvbox-dark-medium t))
#+end_src
*** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

*** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

** Org Mode
*** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

*** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " â†’ " ))
#+end_src

* Hosts
General configurations that used on all hosts + folders for host specific
** default.nix
#+begin_src nix :tangle ./hosts/default.nix
  { lib, inputs, nixpkgs, home-manager, emacs-overlay, ... }:
  let
    system = "x86_64_linux";

    lib = nixpkgs.lib;
  in
  {
    framework = lib.nixosSystem {
      inherit system;
  
      modules = [
         { nixpkgs.overlays = [
             emacs-overlay.overlay
           ];
           nixpkgs.config.allowUnfree = true;
         }
        ./framework
        ./configuration.nix
  
        home-manager.nixosModules.home-manager {
          home-manager.useUserPackages = true;
          home-manager.useGlobalPkgs = true;

          home-manager.users.susan = {
            imports = [(import ./home.nix)] ++ [(import ./framework/home.nix)];
          };
        } 
      ];
    };
  } 
#+end_src
** configuration.nix
#+begin_src nix :tangle ./hosts/configuration.nix
  { config, lib, pkgs, ... }:
  {
    time.timeZone = "Europe/Bucharest";
  
    boot.kernelPackages = pkgs.linuxPackages_latest;

    security.polkit.enable = true;
  
    fonts.packages = with pkgs; [
     (nerdfonts.override { fonts = [ "FiraCode" ]; })
     font-awesome
     fira
    ];
  
    services = {
      udev.packages = [ pkgs.yubikey-personalization ];
      pcscd.enable = true;
      pipewire = { 
        enable = true;
        pulse.enable = true;
      }; 
    };
  
    users = {
      mutableUsers = false; 
      defaultUserShell = pkgs.fish;
      users.susan = {
        isNormalUser = true;
        extraGroups = [ "wheel" "video"];
        hashedPassword = "$6$vru/Kz/2RFnBeCXQ$FPDE/DET/P2pNfE2bpVsEdDCeMegmeMApE4l3m/2YR9t6qCSrdiTzqUr8aN1gnOTAcYXBQ30NUf3UtqxINmDL.";
      };
    };
  
    environment.systemPackages = with pkgs; [
    ];

    programs = {
      dconf.enable = true;
      fish.enable = true;
    };
  
    nix.settings.experimental-features = [ "nix-command" "flakes" ];

    networking.networkmanager.enable = true;
  
    system = {
      #autoUpgrade = {
      #  enable = true;
      #  dates = "02:00";
      #  persistent = true;
      #  flake = "github:susanthenerd/dotfiles";
      #  allowReboot = true;
      #  rebootWindow = {
      #    lower = "02:00";
      #    upper = "04:00";
      #  };
      #}; 
      # This value determines the NixOS release from which the default
      # settings for stateful data, like file locations and database versions
      # on your system were taken. It's perfectly fine and recommended to leave
      # this value at the release version of the first install of this system.
      # Before changing this value read the documentation for this option
      # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
      stateVersion = "23.05"; # Did you read the comment?
    }; 
  }
#+end_src
** home.nix
home-manager configs
#+begin_src nix :tangle ./hosts/home.nix
  { config, lib, pkgs, ... }:
  { 
    imports =
    [(import ../modules/programs/emacs)]
    ++ [(import ../modules/programs/exa)]
    ++ [(import ../modules/programs/fish)]
    ++ [(import ../modules/programs/git)]
    ++ [(import ../modules/programs/starship)];
  
    home = {
      username = "susan";
      homeDirectory = "/home/susan";
  
      packages = with pkgs; [
        prismlauncher
        firefox
        signal-desktop
        yubioath-flutter
        pavucontrol
        pinentry-curses
        fuzzel
        htop
        gimp
      ];
      # pointerCursor = {                         # This will set cursor system-wide so applications can not choose their own
      #  gtk.enable = true;
      #  #name = "Dracula-cursors";
      #  name = "Catppuccin-Mocha-Dark-Cursors";
      #  #package = pkgs.dracula-theme;
      #  package = pkgs.catppuccin-cursors.mochaDark;
      #  size = 16;
      # };
      stateVersion = "23.05";
    };

    programs = {
      home-manager.enable = true;
      fish.enable = true;
      neovim.enable = true;
    };
  
    gtk = {
      enable = true;
    #  theme = {
    #    name = "Gruvbox-Dark";
    #    package = pkgs.gruvbox-dark-gtk;
    #  };
      font = {
        name = "FiraCode Nerd Font Mono";
      };
    };
  }
#+END_src
** Framework Laptop
Specific configs for my Framework Laptop
Specs of the Framework
i7-1280P 6P 8E 20T 4.7Ghz
64GB DDR4 3200Mhz
Segate Firecuda 530 2TB Nvme GEN 4x4

*** default.nix
#+begin_src nix :tangle ./hosts/framework/default.nix
  { config, pkgs, lib, ... }:
  {
    security.pam.services = {
      login.u2fAuth = true;
      sudo.u2fAuth = true;
    };
  
    imports = [(import ./hardware-configuration.nix)] ++ [(../../modules/services/syncthing)];
  
    programs = {
      light.enable = true;
    };

    networking.hostName = "framework";
  
    services = {
      #tlp.enable = true;                      # TLP and auto-cpufreq for power management
      auto-cpufreq.enable = true;
      blueman.enable = true;
    };
    xdg.portal = {
      enable = true;
      wlr.enable = true;
    };
  }
#+end_src
*** hardware-configuration.nix
The only special thing here is that I have here configured the file systems
#+begin_src nix :tangle ./hosts/framework/hardware-configuration.nix
  { config, lib, pkgs, modulesPath, ... }:
  {

    imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

    fileSystems = {
      "/" ={ 
        device = "/dev/disk/by-uuid/b183e5d3-8679-4e45-88e6-bc1393323dfd";
        fsType = "btrfs";
      };
      "/boot" ={ 
        device = "/dev/disk/by-uuid/9829-2BBA";
        fsType = "vfat";
      };
    };
  
    boot = {
      initrd = {
        availableKernelModules = [ "xhci_pci" "thunderbolt" "nvme" "usb_storage" "usbhid" "sd_mod" ];
        kernelModules = [ "dm-snapshot" ];
        luks.devices."luks" = { 
          device = "/dev/disk/by-uuid/6c40ab71-86cd-40ff-82f6-0936ad7eb61d";
          preLVM = true;
        };
      };
      kernelModules = [ "kvm-intel" ];
      extraModulePackages = [ ];
      loader = {
        systemd-boot.enable = true;
        efi.canTouchEfiVariables = true;
      };
    };
  
    swapDevices =
      [ { device = "/dev/disk/by-uuid/9a231275-fc03-40c1-8c7b-a14f1592f185"; }
      ];

    networking.useDHCP = lib.mkDefault true;

    nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
    powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
    hardware = {
      opengl.enable = true;
      pulseaudio.enable = false;
      cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
    };
  }
#+end_src
*** home.nix
Specific home-manager configs for my framework
#+begin_src nix :tangle ./hosts/framework/home.nix
  { config, lib, pkgs, ... }:
  {
    imports = [(import ../../modules/desktop/sway)]
    ++ [(import ../../modules/programs/foot)];
    programs = {
      obs-studio.enable = true;
    };
    xdg.enable = true;
  }
#+end_src
* Modules
** Desktop
*** Sway
#+begin_src nix :tangle ./modules/desktop/sway/default.nix
  {config, lib, pkgs, ... }:
  {
    imports = [(../../programs/i3status-rust)];
    wayland.windowManager.sway = {
      enable = true;
      config = rec {
        modifier = "Mod4";
        terminal = "foot";
        startup = [
          # Launch Firefox on start
          {command = "firefox";}
          {command = "signal-desktop";}
        ];
        fonts = {                                                                                                                                                                     
          names = [ "FiraCode Nerd Font Mono" "FontAwesome"];
          style = "Regular";
          size = 11.0;
        };    

        bars = [
          {
            fonts = {
              names = [ "FiraCode Nerd Font Mono" "FontAwesome"];
              style = "Regular";
              size = 11.0;
            };
            position = "bottom";
            statusCommand = "i3status-rs ~/.config/i3status-rust/config-default.toml";
            # colors={
            #  separator = "#666666";
            #  background = "#222222";
            #  statusline = "#dddddd";
            #  focusedWorkspace = {
            #    background = "#0088CC";
            #    border = "#0088CC";
            #    text = "#ffffff";
            #  };
            #  activeWorkspace = {
            #    background = "#333333";
            #    border = "#333333";
            #    text = "#ffffff";
            #  };
            #  inactiveWorkspace = {
            #   background = "#333333";
            #   border = "#333333";
            #   text = "#888888";
            #  };
            #  urgentWorkspace = {
            #    background = "#2f343a";
            #    border = "#900000";
            #    text = "#ffffff";
            #  };
            #};
          }
        ];
        gaps = {
          outer = 4;
          inner = 4;
          smartBorders = "on";
        };
        keybindings = {
          #Launch stuff
          "${modifier}+Return" = "exec ${terminal}";
          "${modifier}+Shift+b" = "exec firefox";
          "${modifier}+Shift+Return" = "exec fuzzel";
  
          # Windows
          "${modifier}+Shift+c" = "kill";

          # Layouts
          "${modifier}+b" = "splith";
          "${modifier}+v" = "splitv";

          # Switch the current container between different layout styles
          "${modifier}+s" = "layout stacking";
          "${modifier}+w" = "layout tabbed";
          "${modifier}+e" = "layout toggle split";

          "${modifier}+f" = "fullscreen";

          # Toggle the current focus between tiling and floating mode
          "${modifier}+Shift+space" = "floating toggle";

          # Swap focus between the tiling area and the floating area
          "${modifier}+space" = "focus mode_toggle";

          # Move focus to the parent container
          "${modifier}+a" = "focus parent";
  
          # Workspaces
          "${modifier}+1" = "workspace number 1";
          "${modifier}+2" = "workspace number 2";
          "${modifier}+3" = "workspace number 3";
          "${modifier}+4" = "workspace number 4";
          "${modifier}+5" = "workspace number 5";
          "${modifier}+6" = "workspace number 6";
          "${modifier}+7" = "workspace number 7";
          "${modifier}+8" = "workspace number 8";
          "${modifier}+9" = "workspace number 9";

          "${modifier}+Shift+1" = "move container to workspace number 1";                                                               
      	  "${modifier}+Shift+2" = "move container to workspace number 2";                                                               
      	  "${modifier}+Shift+3" = "move container to workspace number 3";                                                               
   	  "${modifier}+Shift+4" = "move container to workspace number 4";                                                               
      	  "${modifier}+Shift+5" = "move container to workspace number 5";                                                               
      	  "${modifier}+Shift+6" = "move container to workspace number 6";                                                               
      	  "${modifier}+Shift+7" = "move container to workspace number 7";                                                               
      	  "${modifier}+Shift+8" = "move container to workspace number 8";                                                               
      	  "${modifier}+Shift+9" = "move container to workspace number 9";

          # Resize
          "${modifier}+r" = "mode resize";
  
          # Other keybindings
          "${modifier}+Shift+r" = "reload";
          "${modifier}+Shift+e" = "exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'";
        };
        modes = {
          resize = {
            "Down" = "resize grow height 10 px";
            "Escape" = "mode default";
            "Left" = "resize shrink width 10 px";
            "Return" = "mode default";
            "Right" = "resize grow width 10 px";
            "Up" = "resize shrink height 10 px";
            "h" = "resize shrink width 10 px";
            "j" = "resize grow height 10 px";
            "k" = "resize shrink height 10 px";
            "l" = "resize grow width 10 px";
          };
        };
  
        output = {
          eDP-1 = {
            scale = "1";
	  };
          DP-1 = {
            scale = "1";
          };
	};
      };
    };
  }
#+end_src
** Programs
*** Emacs
This is home-manager specific things
#+begin_src nix :tangle ./modules/programs/emacs/default.nix
  {config, lib, pkgs, ... }:
  let  
    myEmacs = pkgs.emacsWithPackagesFromUsePackage {                                      
      config = ./config.el;                                                               
      defaultInitFile = true;
      alwaysEnsure = true;
      package = pkgs.emacs-pgtk;                                                          
    };  
  in
  {
    programs.emacs = {
      enable = true;
      package = myEmacs;
    };
    # services.emacs = {
    #  enable = true;
    #  package = myEmacs;
    #  client.enable = true;
    #  defaultEditor = true;
    # };
  }
#+end_src
*** Exa
#+begin_src nix :tangle ./modules/programs/exa/default.nix
  {config, lib, pkgs, ... }:
  {
    programs.exa = {
      enable = true;
      git = true;
      icons = true;
      enableAliases = true;
    };
  }
#+end_src
*** Fish
#+begin_src nix :tangle ./modules/programs/fish/default.nix
  {config, lib, pkgs, ...}:
  {
    programs.fish = {
      enable = true;
      shellAliases = {
        "rebuild" = "sudo nixos-rebuild switch --flake .";
        "flake-check" = "nix flake check";
      };
      shellInit = "set -g fish_greeting";
    };
  }
#+end_src
*** Foot
#+begin_src nix :tangle ./modules/programs/foot/default.nix
  {config, lib, pkgs, ...}:
  {
    programs.foot = {
      enable = true;
      settings = {
        main = {
          font = "FiraCode Nerd Font Mono:size=14";
        };
        colors = {
          # Gruvbox Dark
          background = "282828";
          foreground = "ebdbb2";
          regular0 = "282828";
          regular1 = "cc241d";
          regular2 = "98971a";
          regular3 = "d79921";
          regular4 = "458588";
          regular5 = "b16286";
          regular6 = "689d6a";
          regular7 = "a89984";
          bright0 = "928374";
          bright1 = "fb4934";
          bright2 = "b8bb26";
          bright3 = "fabd2f";
          bright4 = "83a598";
          bright5 = "d3869b";
          bright6 = "8ec07c";
          bright7 = "ebdbb2";
        };
      };
    };
  }
#+end_src
*** Git
#+begin_src nix :tangle ./modules/programs/git/default.nix
  {config, lib, pkgs, ... }:
  {
    programs.git = {
      enable = true;
      userName = "Susan";
      userEmail = "susan@susan.lol";
    };
  }
#+end_src
*** i3Status-rust
#+begin_src nix :tangle ./modules/programs/i3status-rust/default.nix
  {config, lib, pkgs, ... }:
  {
    programs.i3status-rust = {
      enable = true;
      bars = {
        default = {
          theme = "gruvbox-dark";
          icons = "awesome6";
          blocks = [
            {
              block = "memory";
              format = " $icon $mem_used_percents ";
              format_alt = " $icon SWAP $swap_used_percents ";
            }
            {
              block = "cpu";
              interval = 1;
            }
            {
              block = "load";
              format = " $icon $1m ";
              interval = 1;
            }
            {
              block = "sound";
            }
            {
              block = "backlight";
            }
            {
              block = "time";
              format = " $timestamp.datetime(f:'%a %d/%m %R') ";
              interval = 60;
            }
          ];
        };
      };
    };
  }
#+end_src
*** Starship
#+begin_src nix :tangle ./modules/programs/starship/default.nix
  {config, lib, pkgs, ... }:
  {
    programs.starship = {
      enable = true;
      # Configuration written to ~/.config/starship.toml
      settings = {
        # add_newline = false;
  
        # character = {
        #   success_symbol = "[âžœ](bold green)";
        #   error_symbol = "[âžœ](bold red)";
        # };
  
        # package.disabled = true;
      };
    };
  }
#+end_src
** Services
All services configured on my laptop and servers
*** Syncthing
File sync to my phone
#+begin_src nix :tangle ./modules/services/syncthing/default.nix
  {config, pkgs, lib, ... }:
  { 
    services.syncthing = {
      enable = true;
      user = "susan";
      dataDir = "/home/susan/phone/";
      configDir = "/home/susan/.config/syncthing"; # I don't have any special configurations, but I'm letting this option here in case I forget about it 
    };
  }
#+end_src
* Github Actions
** automate daily version bump
#+begin_src yaml :tangle ./.github/workflows/auto-version-bump.yaml
  name: Daily Nix Flake Version Bump

  on:
    schedule:
      - cron:  '0 0 * * *'

  jobs:
    flake_update:
      runs-on: ubuntu-latest

      steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Nix
        uses: cachix/install-nix-action@v16

      - name: Update Flake
        run: |
          nix flake update
          if nix flake check; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add flake.lock
            git commit -m "automated daily version bump"
            git push
          fi
#+end_src
** automated nix flake check on push
#+begin_src yaml :tangle ./.github/workflows/auto-commit-check.yaml
  name: Nix Flake Check On Commit
  
  on:
    push:
      branches:
        - '**'
  
  jobs:
    flake_check:
      runs-on: ubuntu-latest
  
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Nix
        uses: cachix/install-nix-action@v22

      - name: Nix Flake Check
        run: nix flake check
#+end_src
